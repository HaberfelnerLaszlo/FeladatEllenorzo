@page "/"
@using FeladatEllenorzo_CP.Data
@using FeladatEllenorzo_CP.Services;
@using Microsoft.Graph.Models
@using System.Text;
@using System.Text.Json;
@using System.ComponentModel;
@using System.Windows.Input;
@* @inject GraphService_2 graph*@
@inject IGraphService _graphService
@inject GlobalData data
@inject NavigationManager navi
@inject INavigationService _navigationService
@inject IAuthenticationService auth
@inject ISettingsService settingsService

@if (Me is null)
{
	<p>Belépés folyamatban...</p>
    <button @onclick="OnSignInOrOut">@_signInOrOutText</button>
}
else
{
	<h2>Hello, @Me.DisplayName!</h2>
}
@if (classes is not null)
{
	<h4 class="my-3">Tanított osztályok:</h4>
	<ul class="list-unstyled list-group w-50 m-3">
	@foreach (var item in classes.Value.Where(c => !c.DisplayName.Contains("Exp")))
	{
		<li class="list-group-item-action" @onclick="(()=>SelectedClass(item.Id))">@item.DisplayName</li>
	}
	</ul>
}

@code{
    private EducationClassCollectionResponse classes;
    private User Me=null;
    private string SelectedClassId = string.Empty;
    string path = Path.Combine(FileSystem.Current.AppDataDirectory,"szoveg.json");
    private List<DataSzoveg> dataSzoveg = new();
    public ICommand SignInOrOutCommand { get; private set; }
    public bool IsSignedIn
    {
        get => auth?.IsSignedIn ?? false;
    }
    protected override async Task OnInitializedAsync()
    {
        auth.PropertyChanged += OnPropertyChanged;
        SignInOrOutCommand = new Command(
    execute: async () => await OnSignInOrOut());
        _graphService.InitializeGraphForAppOnlyAuth(settingsService);
        if (File.Exists(path))
        {
            await ReadSzoveg();
        }
        else
        {
            // Create the file.
            var text = InitSzoveg();
            using (StreamWriter sw = new StreamWriter(path))
            {
                sw.WriteLine(text);
            }
            await ReadSzoveg();
        }
       await OnSignInOrOut();
    }
    private string InitSzoveg()
    {
        var data = new List<DataSzoveg>()
			{
				new DataSzoveg(){ Type = "poz", Text = "tökéletes" },
				new DataSzoveg(){ Type = "poz", Text = "nagyon jó"},
				new DataSzoveg(){ Type = "poz", Text = "rendben."},
				new DataSzoveg(){ Type = "poz", Text = "rendben hibátlan"},
				new DataSzoveg(){ Type = "poz", Text = "rendben majdnem hibátlan"},
				new DataSzoveg(){ Type = "neg", Text = "hiányos feladat"},
				new DataSzoveg(){ Type = "neg", Text = "feladat rész hiányzik"},
				new DataSzoveg(){ Type = "neg", Text = "miért nincs kész a feladatod?"}
		};
        return JsonSerializer.Serialize(data);
    }
    private async Task ReadSzoveg()
    {
        try
        {
            using (StreamReader sr = File.OpenText(path))
            {
                string s = "";
                s = await sr.ReadToEndAsync();
                dataSzoveg = JsonSerializer.Deserialize<List<DataSzoveg>>(s);
            }
            if (dataSzoveg.Count>0)
            {
                data.pSzoveg.Clear();
                data.nSzoveg.Clear();
                foreach (var item in dataSzoveg)
                {
                    if (item.Type == "poz")
                    {
                        data.pSzoveg.Add(item.Text);
                    }
                    else data.nSzoveg.Add(item.Text);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private void SelectedClass(object value)
    {
        if (value is not null)
        {
            SelectedClassId = value.ToString();
            navi.NavigateTo($"feladatok/{SelectedClassId}");
        }
    }
    // private async void Token()
    // {
    //     try
    //     {
    //         var userToken = await graph.GetUserTokenAsync();
    //         Console.WriteLine($"User token: {userToken}");
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error getting user access token: {ex.Message}");
    //     }

    // }
    /// <summary>
    /// Event handler for property change event on authentication service's IsSignedIn property
    /// </summary>
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs args)
    {
        var v = nameof(auth.IsSignedIn);
        if (args.PropertyName == nameof(auth.IsSignedIn))
        {
            // Bubble up the change to any views bound to this view model
            //OnPropertyChanged(nameof(IsSignedIn));
            HandleSignInChange();
        }
    }
    /// <summary>
    /// Override this to take action when IsSignedIn changes
    /// </summary>
    // protected virtual void HandleSignInChange()
    // {
    // }
    private string _signInOrOutText = "Bejelentkezés";
    /// <summary>
    /// The text to display on the sign in/out button
    /// </summary>
    public string SignInOrOutText
    {
        get => _signInOrOutText;
        set => _signInOrOutText= value ;
    }

    private string _userName;
    /// <summary>
    /// The user's display name
    /// </summary>
    public string UserName
    {
        get => _userName;
        set => _userName=value;
    }

    private string _userEmail;
    /// <summary>
    /// The user's email address
    /// </summary>
    public string UserEmail
    {
        get => _userEmail;
        set =>_userEmail =value;
    }

    private async Task OnSignInOrOut()
    {
        if (IsSignedIn)
        {
            await auth.SignOutAsync();
            //await _navigationService.NavigatePostSignOut();
        }
        else
        {
            var success = await auth.SignInAsync();
            //await _navigationService.NavigatePostSignIn();
        }
    }

    protected void HandleSignInChange()
    {
        // Update the button text
        SignInOrOutText = IsSignedIn ? "Kijelentkezés" : "Bejelentkezés";

        if (IsSignedIn)
        {
            GetUserDetailsAsync();
        }
        else
        {
            UserName = string.Empty;
            UserEmail = string.Empty;
        }
    }

    /// <summary>
    /// Get the user's info and photo from Microsoft Graph
    /// </summary>
    private async void GetUserDetailsAsync()
    {
        // Get user
        var user = await _graphService.GetUserInfoAsync();
        Me = user;
        classes = await _graphService.GetTaughtClasses(Me.Id);

        UserName = user.DisplayName;
        UserEmail = user.Mail ?? user.UserPrincipalName;
        StateHasChanged();
    }
}
