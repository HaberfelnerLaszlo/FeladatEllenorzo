@page "/hiba"
@inject GlobalData data
@inject IHibaService hiba
@inject IAlertService alert
@inject IGraphService graph
<div class="container">
    <div class="row">
        <div class="col-2 col-md-4">
            <a href="/" hidden="@(!isSaved)">Vissza...</a>
            <button class="btn btn-outline-info" @onclick=Save hidden="@isSaved">Mentés</button>
        </div>
        <div class="col col-md">
            <h5>Leckét nem feltöltött tanulók</h5>
        </div>
        <div class="col-3 col-md-4">
            <InputDate DisplayName="Időpont" Value=datum ValueChanged="((DateTime value)=>ChangeDatum(value))" ValueExpression="(()=>datum)" />
        </div>
    </div>
    <div class="row-cols-2">
        <button class="btn btn-light" @onclick=Send>Küldés</button>
        <button class="btn btn-danger" @onclick=DeleteAll>Minden törlése</button>
    </div>
    @if (hibak.Count == 0)
    {
        <p>@message</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Név</th>
                        <th>Hibák</th>
                        <th>Művelet</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var osztaly in osztalyok)
                    {
                        <tr>
                            <td colspan="2">@osztaly</td>
                            <td>
                                <button class="btn btn-danger" @onclick=@(()=>DeleteClass(osztaly))>Törlés</button>
                            </td>
                        </tr>
                        @foreach (var item in hibak.Where(h => h.Osztaly == osztaly))
                        {
                            <tr>
                                <td>@item.Name</td>
                                @if (item.Hibak.Count > 0)
                                {
                                    <ul>
                                        @foreach (var hiba in item.Hibak)
                                        {
                                        <td>
                                            <li>@hiba.Leiras</li>
                                        </td>
                                        <td>
                                            <button class="btn-sm" @onclick="(()=>Delete(item, hiba))">Törlés</button>
                                        </td>
                                    }
                                        </ul>
                                    }
                                    else
                                    {
                                        <td colspan="2">Nincs hiábás leckéje</td>
                                    }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>
@code {
    List<Tanulo> hibak = new();
    List<HibasFeladat> changed = new();
    string[] osztalyok;
    string message = string.Empty;
    bool isSaved = true;
    DateTime datum = DateTime.Today;
    protected async override Task OnInitializedAsync()
    {
        try
        {
            message = "Betöltés alatt...";
            hibak = await hiba.GetMaiHibak();
            message = "Nincsenek a mai napon lecke hiányok.";
            osztalyok = hibak.Select(h => h.Osztaly).Distinct().ToArray();
        }
        catch (Exception)
        {
            throw;
        }
    }
    async void ChangeDatum(DateTime arg)
    {//datum = DateTime.Parse(arg);
        datum = arg;
        hibak = await hiba.GetHibak(datum.ToShortDateString());
        StateHasChanged();
    }
    async Task Save()
    {
        foreach (var item in changed)
        {
            var response = await hiba.Update(item);
            if (!response.IsSuccess)
            {
                message = response.ErrorMessage;
            }
        }
        isSaved = true;
    }
    async Task Delete(Tanulo tanulo, HibasFeladat item)
    {
        if (await alert.DisplayConfirm("Művelet megerősítése", $"Biztosan törölni szeretné a {tanulo.Name} lecke hiányát?", "Igen", "Nem"))
        {
            var response = await hiba.Remove(item);
            if (response.IsSuccess)
            {
                await alert.ShowAlertAsync(response.Content.ToString(), "Sikeres művelet", "Ok");
                hibak.FirstOrDefault(t=>t.Id==tanulo.Id).Hibak.Remove(item);
                StateHasChanged();
            }
        }
    }
    public void Send()
    {
        string data = datum.ToLongDateString() + ": ";
        foreach (var item in hibak)
        {
            data = data + item.Name + System.Environment.NewLine;
        }
        var response = graph.SendMe(data).GetAwaiter().GetResult();
        if (response)
        {
            alert.ShowAlertAsync( "Sikeres küldés.", "Rendszer üzenet", "Rendben");
        }
        else alert.ShowAlertAsync("Sikertelen küldés.","Rendszer üzenet", "Rendben");
    }
    async void DeleteAll()
    {
        var response = await hiba.RemoveAll();

        if (response.IsSuccess)
        {
            await alert.ShowAlertAsync( response.Content.ToString(), "Rendszer üzenet", "Rendben");
        }
        else
        {
            await alert.ShowAlertAsync( response.ErrorMessage, "Rendszer üzenet", "Rendben");
        }
    }
    async void DeleteClass(string osztaly)
    {

    }
}
