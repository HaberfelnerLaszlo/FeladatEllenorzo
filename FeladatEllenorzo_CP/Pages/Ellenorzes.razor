@page "/ell"
@using FeladatEllenorzo_CP.Services;
@using Microsoft.FluentUI.AspNetCore.Components
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@inject IGraphService graph
@inject GlobalData data
@inject NavigationManager navi
@inject IAlertService alert
@inject IToastService toastService
@inject IDialogService dialogService
@inject IHibaService hibaService
@inject IHianyService hianyService
@inject ISzorgalmiService szorgalmiService
@inject IPontService pontService
<FluentGrid Justify="JustifyContent.FlexStart">
    <FluentGridItem xs="12" Justify="JustifyContent.FlexStart" Gap="10px">
        <button class="btn btn-toolbar" @onclick=Back>Vissza</button>
        @if (data.Members.Count > 0)
        {
            <select @onchange="(e) => SelectedMember(e.Value)">
                <optgroup label="Beadta">
                    @{
                        i = 0;
                        @foreach (var item in data.Members.Where(m => m.Status == "Beadva"))
                        {

                            if (item.SubmissionId == data.SubmissionId)
                            {
                                submitted = true;
                                index = i;
                                <option value="@item.SubmissionId" selected>@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.SubmissionId">@item.Name  (@i)</option>
                            }
                            i++;
                        }
                    }
                </optgroup>
                <optgroup label="Visszaküldve">
                    @foreach (var item in data.Members.Where(m => m.Status == "Visszaküldve"))
                    {

                        if (item.SubmissionId == data.SubmissionId)
                        {
                            submitted = false;
                            index = i;
                            <option value="@item.SubmissionId" selected>@item.Name</option>
                        }
                        else
                        {
                            <option value="@item.SubmissionId">@item.Name (@i)</option>
                        }
                        i++;
                    }
                </optgroup>
                <optgroup label="Többiek">
                    @foreach (var item in data.Members.Where(m => m.Status != "Visszaküldve" && m.Status != "Beadva"))
                    {

                        if (item.SubmissionId == data.SubmissionId)
                        {
                            index = i;
                            <option value="@item.SubmissionId" selected>@item.Name</option>
                        }
                        else
                        {
                            <option value="@item.SubmissionId">@item.Name (@i)</option>
                        }
                        i++;
                    }
                </optgroup>
                }
            </select>
            <button @onclick="Next">Next</button>
        }
        <FluentButton OnClick="ViewAssigment">@AssignmentName feladat megtekintése</FluentButton>
        <FluentLabel>
            @DisplayMessage
        </FluentLabel>
    </FluentGridItem>
    <FluentGridItem xs="12" md="8">
        @if (url.Equals(string.Empty))
        {
            <p>Nincs beküldve ...</p>
        }
        else
        {
            <iframe width="100%" height="600" src="@url"></iframe>
        }
    </FluentGridItem>
    <FluentGridItem xs="12" md="4">
        <div>
            @if (mediaResource.Count > 0)
            {
                @foreach (var item in mediaResource)
                {
                    <button @onclick="() => ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
            @if (fileResource.Count > 0)
            {
                @foreach (var item in fileResource)
                {
                    <button @onclick="() => ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
            @if (excelResource.Count > 0)
            {
                @foreach (var item in excelResource)
                {
                    <button @onclick="() => ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
            @if (wordResource.Count > 0)
            {
                @foreach (var item in wordResource)
                {
                    <button @onclick="() => ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
            @if (ppResource.Count > 0)
            {
                @foreach (var item in ppResource)
                {
                    <button @onclick="() => ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
        </div>@* Média elemek*@
        <div class="row">
            <div class="col">
                <ul style="list-style-type:none">
                    @foreach (var item in data.Szovegek.Where(s => s.Type == "poz"))
                    {
                        if (item.Text.Length > 15)
                        {
                            <li @onclick=@(() => AddText(item.Text)) title="@item.Text">@item.Text.Substring(0, 15)</li>
                        }
                        else
                        {
                            <li @onclick=@(() => AddText(item.Text))>@item.Text</li>
                        }
                    }
                </ul>
            </div>@* Szövegek poz*@
            <div class="col">
                <ul style="list-style-type:none">
                    @foreach (var item in data.Szovegek.Where(s => s.Type == "neg"))
                    {
                        if (item.Text.Length > 15)
                        {
                            <li @onclick=@(() => AddText(item.Text)) title="@item.Text">@item.Text.Substring(0, 15)</li>
                        }
                        else
                        {
                            <li @onclick=@(() => AddText(item.Text))>@item.Text</li>
                        }
                    }
                </ul>
            </div>@* Szövegek neg*@
            <div>
                <button class="btn" @onclick=AddNewText>Új</button>
                @if (data.Szovegek.Count > 0)
                {
                    <button class="btn" @onclick=ManageSzovegOpen>Szövegek</button>
                }
                <FluentButton OnClick="@(() => { Valasz = "Kedves " + nev; })">Új válasz</FluentButton>
            </div>
            <div hidden="@visibleNewText">
                <FeladatEllenorzo_CP.Components.NewSzoveg SaveText="SaveText"></FeladatEllenorzo_CP.Components.NewSzoveg>
            </div>
        </div>@* Szövegek*@
        <div>
            <textarea rows="3"
                      placeholder="Visszajelzés..."
                      style="resize:vertical; width:100%; max-height:50%"
                      oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"
                      @onchange=@((e) => Valtozas(false, e))
                      value="@Valasz"
                      lang="hu"
                      spellcheck="false">
						@Valasz
			</textarea>
        </div>
        <div>
            <FluentSwitch Label="Hibaként menteni:" Value="isHiba" @onclick="(() => ChangeHiba())" />
            <FluentSwitch Label="Hiányként menteni:" Value="isHiany" @onclick="(() => ChangeHiany())" />
            <FluentSwitch Label="Szorgalmi? " Value="isSzorg" @onclick="(() => ChangeSzorgalmi())" />
            <FluentSwitch Label="Szorgalmi és lecke? " Value="isSzorgLecke" @onclick="(() => ChangeSzorgalmiLecke())" />
            <FluentSwitch Label="Pótlás? " Value="isPotlas" @onclick="(() => isPotlas = isPotlas ? false : true)" />
            <FluentSwitch Label="Pótlás? " Value="noSave" @onclick="(() => noSave = noSave ? false : true)" />
            <hr />
            <input type="number" style="width: 20%;" value="@Pont" @onchange=@((e) => Valtozas(true, e)) /> pont <span style="color:green" hidden="@IsNotSaved"> ✔️</span>
            <button class="btn btn-primary" disabled="@(!changed)" @onclick=Save>Mentés</button>
        </div>
    </FluentGridItem>
</FluentGrid>
@code {
    private EducationSubmissionResourceCollectionResponse feladatForrasok;
    private List<EducationMediaResource> mediaResource = new();
    private List<EducationFileResource> fileResource = new();
    private List<EducationExcelResource> excelResource = new();
    private List<EducationWordResource> wordResource = new();
    private List<EducationPowerPointResource> ppResource = new();
    private EducationOutcomeCollectionResponse feladatValaszok;
    private EducationFeedbackOutcome valasz;
    private EducationPointsOutcome pont;
    private Szorgalmi szorgalmi;
    private string DriveId = string.Empty, ItemId = string.Empty, url = string.Empty, Valasz = string.Empty, nev = string.Empty, DisplayMessage = string.Empty, AssignmentName = string.Empty;
    private bool submitted = true, changed = false, changedValasz = false, changedPont = false, IsNotSaved = true, visibleNewText = true, isHiba = false, isHiany = false, isSzorg = false, isPotlas = false, isSzorgLecke = false, noSave=false;
    private int index = 0, i = 0;
    private float Pont = 0;
    private IDialogReference? _dialog;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            nev = data.Name.Split(" ")[1];
            isHiany = data.IsHiany > 0;
            AssignmentName = data.Feladatok.Find(f => f.Feladat.Id == data.AssignmentId).Feladat.DisplayName;
            DataInit();
        }
        return base.OnAfterRenderAsync(firstRender);
    }
    private async void DataInit()
    {
        NetworkAccess accessType = Connectivity.Current.NetworkAccess;
        if (accessType != NetworkAccess.Internet)
        {
            await alert.ShowAlertAsync("Nincs internet, állítsa helyre a kapcsolatot!", "Internet hiba", "Rendben");
            return;
        }
        changed = false;
        changedPont = false;
        changedValasz = false;
        IsNotSaved = true;
        mediaResource.Clear();
        fileResource.Clear();
        wordResource.Clear();
        excelResource.Clear();
        ppResource.Clear();
        url = string.Empty;
        Pont = 0;
        try
        {
            feladatForrasok = await graph.GetFeladatForras(data.ClassId, data.AssignmentId, data.SubmissionId);
            foreach (var item in feladatForrasok.Value)
            {
                string fileUrl = string.Empty;
                switch (item.Resource.GetType().Name)
                {
                    case nameof(EducationMediaResource):
                        mediaResource.Add((EducationMediaResource)item.Resource);
                        fileUrl = mediaResource.FirstOrDefault().FileUrl;
                        break;
                    case nameof(EducationFileResource):
                        fileResource.Add((EducationFileResource)item.Resource);
                        fileUrl = fileResource.FirstOrDefault().FileUrl;
                        break;
                    case nameof(EducationExcelResource):
                        excelResource.Add((EducationExcelResource)item.Resource);
                        fileUrl = excelResource.FirstOrDefault().FileUrl;
                        break;
                    case nameof(EducationWordResource):
                        wordResource.Add((EducationWordResource)item.Resource);
                        fileUrl = wordResource.FirstOrDefault().FileUrl;
                        break;
                    case nameof(EducationPowerPointResource):
                        ppResource.Add((EducationPowerPointResource)item.Resource);
                        fileUrl = ppResource.FirstOrDefault().FileUrl;
                        break;
                    default:
                        break;
                }
                if (fileUrl.Length > 0)
                {
                    url = await GetUrl(fileUrl);
                    Pont = 2;
                    changedPont = true;
                }
                else
                {
                    Pont = 0;
                    url = string.Empty;
                }
            }
            feladatValaszok = await graph.GetFeladatValasz(data.ClassId, data.AssignmentId, data.SubmissionId);
            foreach (var item in feladatValaszok.Value)
            {
                valasz = (EducationFeedbackOutcome)item;
                @if (valasz is not null && valasz.Feedback is not null)
                {
                    Valasz = valasz.Feedback.Text.Content;
                }
                else
                {
                    Valasz = "Kedves " + nev;
                }
            }
            var feladatPontok = await graph.GetFeladatPont(data.ClassId, data.AssignmentId, data.SubmissionId);
            foreach (var item in feladatPontok.Value)
            {
                pont = (EducationPointsOutcome)item;
                @if (pont is not null && pont.Points is not null)
                {
                    Pont = pont.Points.Points.Value;
                    if (!String.IsNullOrEmpty(url) && Pont == 0)
                    {
                        Pont = 2;
                        changedPont = true;
                    }
                    IsNotSaved = false;
                }
            }
        }
        catch (Exception e)
        {
            await alert.ShowAlertAsync(e.Message, "Kivétel történt", "Ok");
        }
        StateHasChanged();
    }
    private void Next()
    {
        var j = data.Members.FindIndex(m => m.SubmissionId == data.SubmissionId);
        if (j < data.Members.Count - 1)
        {
            data.SubmissionId = data.Members[j + 1].SubmissionId;
            data.Name = data.Members[j + 1].Name.Split(" ")[1];
            nev = data.Members[j + 1].Name.Split(" ")[1];
            data.StudentId = data.Members[j + 1].Id;
            isHiany = data.Members[j + 1].IsHiany > 0;
            data.IsHiany = data.Members[j + 1].IsHiany;
        }
        else
        {
            data.SubmissionId = data.Members[0].SubmissionId;
            data.Name = data.Members[0].Name.Split(" ")[1];
            nev = data.Members[0].Name.Split(" ")[1];
            data.StudentId = data.Members[0].Id;
            isHiany = data.Members[0].IsHiany > 0;
            data.IsHiany = data.Members[0].IsHiany;
        }
        DataInit();
    }
    private async Task<string> GetUrl(string fileUrl)
    {
        NetworkAccess accessType = Connectivity.Current.NetworkAccess;
        if (accessType != NetworkAccess.Internet)
        {
            await alert.ShowAlertAsync("Nincs internet, állítsa helyre a kapcsolatot!", "Internet hiba", "Rendben");
            return string.Empty;
        }
        var lenght = fileUrl.Length;
        if (lenght > 34)
        {
            try
            {
                ItemId = fileUrl.Substring(lenght - 34);
                DriveId = fileUrl.Substring(40, 66);
                var fileInfo = await graph.GetFile(DriveId, ItemId);
                if (fileInfo is not null)
                {
                    if (DisplayMessage.Length > 0)
                    {
                        DisplayMessage = string.Empty;
                    }
                    return fileInfo.GetUrl;
                }
            }
            catch (System.Net.Http.HttpRequestException)
            {
                DisplayMessage = "Sajnos hálozati hiba történt!";
            }
            catch (Exception ex)
            {
                DisplayMessage = $"Valami hiba történt a fájl lekérésekor: {ex.Message}";
            }
        }
        return string.Empty;
    }
    private async void ShowImage(string fileUrl)
    {
        url = await GetUrl(fileUrl);
        StateHasChanged();
    }
    private void SelectedMember(object args)
    {
        data.SubmissionId = args.ToString();
        try
        {
            var tanulo = data.Members.FirstOrDefault(m => m.SubmissionId == args.ToString());
            nev = tanulo.Name.Split(" ")[1];
            data.Name = tanulo.Name;
            isHiany = tanulo.IsHiany > 0;
            data.IsHiany = tanulo.IsHiany;
        }
        catch (Exception e)
        {
            throw new Exception(e.Message, e);
        }
        DataInit();
    }
    private void Valtozas(bool changePont, ChangeEventArgs args)
    {
        changed = true;
        IsNotSaved = true;
        if (changePont)
        {
            changedPont = true;
            Pont = float.Parse(args.Value.ToString());
        }
        else
        {
            changedValasz = true;
            Valasz = args.Value.ToString();
        }
    }
    private void Back()
    {
        navi.NavigateTo($"feladatok/{data.ClassId}");
    }
    private async void Save()
    {
        NetworkAccess accessType = Connectivity.Current.NetworkAccess;
        if (accessType != NetworkAccess.Internet)
        {
            await alert.ShowAlertAsync("Nincs internet, állítsa helyre a kapcsolatot!", "Internet hiba", "Rendben");
            return;
        }
        var response = false;
        if (valasz is not null && changedValasz)
        {
            response = await graph.UpdateValasz(data.ClassId, data.AssignmentId, data.SubmissionId, valasz.Id, Valasz);
        }
        if (valasz is not null && changedPont)
        {
            response = await graph.UpdatePont(data.ClassId, data.AssignmentId, data.SubmissionId, pont.Id, Pont);
            if (isPotlas)
            {
                var res = await pontService.Add(new() { Datum = DateTime.Today, PontSzam = 1, TanuloId = data.StudentId, Jegyzet = data.AssignmentId, PontTipus = PontTipus.Pótlás });
                isPotlas = false;
                if (res.IsSuccess)
                {
                    toastService.ShowInfo("A pótlás mentve az adatbázisba.");
                }
                else if (res.ErrorMessage is not null)
                {
                    await alert.ShowAlertAsync(res.ErrorMessage.Normalize(), "Rendszer üzenet", "Rendben");
                }
                else
                {
                    await alert.ShowAlertAsync("A válasz hiba üzenete null érték lett!", "Hiba üzenet", "Rendben");
                }
            }
            else if (!isSzorg)
            {
                var res = await pontService.Add(new() { Datum = DateTime.Today, PontSzam = (int)Pont, TanuloId = data.StudentId, Jegyzet = $"{AssignmentName} ; {data.AssignmentId}", PontTipus = PontTipus.Lecke });
                if (res.IsSuccess)
                {
                    toastService.ShowInfo("A pont mentve az adatbázisba.");
                    //await alert.ShowAlertAsync(res.Content.ToString(), "Rendszer üzenet", "Rendben");
                }
                else
                {
                    await alert.ShowAlertAsync(res.ErrorMessage, "Rendszer üzenet", "Rendben");
                }
            }
        }
        if (isHiba)
        {
            var res = await hibaService.Add(new() { Datum = DateOnly.FromDateTime(DateTime.Today), Leiras = Valasz, TanuloId = data.StudentId, Osztaly = data.Osztalynev });
            isHiba = false;
            if (res.IsSuccess)
            {
                toastService.ShowInfo("Az üzenet mentve a hibákhoz.");
            }
            else
            {
                await alert.ShowAlertAsync(res.ErrorMessage, "Rendszer üzenet", "Rendben");
            }
        }
        if (isHiany)
        {
            var res = await hianyService.Add(new() { Datum = DateOnly.FromDateTime(DateTime.Today), Hianyzik = false, TanuloId = data.StudentId, FeladatId = Guid.Parse(data.AssignmentId), Osztaly = data.Osztalynev });
            isHiany = false;
            if (res.IsSuccess)
            {
                toastService.ShowInfo("Az tanuló mentve a lecke hiányhoz.");
            }
            else
            {
                await alert.ShowAlertAsync(res.ErrorMessage, "Rendszer üzenet", "Rendben");
            }
        }
        else
        {
            if (data.IsHiany > 0)
            {
                var res = await hianyService.Remove(data.IsHiany);
                if (res.IsSuccess)
                {
                    toastService.ShowInfo("A tanuló lecke hiánya eltávolítva.");
                }
                else
                {
                    await alert.ShowAlertAsync(res.ErrorMessage, "Rendszer üzenet", "Rendben");
                }
            }
        }
        if ((isSzorg || isSzorgLecke) && szorgalmi is not null)
        {
            var res = await szorgalmiService.Add(szorgalmi);
            if (res.IsSuccess)
            {
                toastService.ShowInfo("A szorgalmi mentve az adatbázisba.");
                isSzorg = false;
                isSzorgLecke = false;
            }
            else
            {
                Console.Write("Hiba a szorgalmi mentésekor: " + res.ErrorMessage);
                isSzorg = false;
                isSzorgLecke = false;
                toastService.ShowError($"Hiba a szorgalmi mentésekor! Üzenet: {res.ErrorMessage}");
            }
        }
        if (!response)
        {
            toastService.ShowError("A mentés nem sikerült!");
        }
        else
        {
            var returned = await graph.Return(data.ClassId, data.AssignmentId, data.SubmissionId);
            if (returned)
            {
                data.Members.FirstOrDefault(m => m.SubmissionId == data.SubmissionId).Status = "Visszaküldve";
            }
            Next();
        }
    }
    private void AddText(string text)
    {
        Valasz = Valasz + $" {text}";
        changed = true;
        changedValasz = true;
    }
    void AddNewText()
    {
        visibleNewText = false;
    }
    void SaveText()
    {
        visibleNewText = true;
    }
    void ManageSzovegOpen()
    {
        navi.NavigateTo("szoveg/ell");
    }
    void ChangeHiba()
    {
        isHiba = isHiba ? false : true;
    }
    void ChangeHiany()
    {
        isHiany = isHiany ? false : true;
    }
    async Task ChangeSzorgalmi()
    {
        isSzorg = isSzorg ? false : true;
        szorgalmi = new() { Feladatok_szama = 1, Pont = 2, Osztaly = data.ClassId, TanuloId = data.StudentId };
        var par = new DialogParameters<Szorgalmi>()
        {
            Content = szorgalmi,
            Alignment = HorizontalAlignment.Right,
            Title = "Szorgalmi felvétele",
            ShowDismiss = false,
            PrimaryActionEnabled = true,
            SecondaryActionEnabled = true,
            PrimaryAction = "Mentés",
            SecondaryAction = "Mégsem",
        };

        _dialog = await dialogService.ShowPanelAsync<DialogAddSzorgalmi>(szorgalmi, par);
        DialogResult result = await _dialog.Result;
        if (!result.Cancelled)
        {
            szorgalmi = result.Data as Szorgalmi;
            //ujSzorgalmi =
        }
        else { isSzorg = false; }

    }
    async Task ChangeSzorgalmiLecke()
    {
        isSzorgLecke = isSzorgLecke ? false : true;
        szorgalmi = new() { Feladatok_szama = 1, Pont = 2, Osztaly = data.ClassId, TanuloId = data.StudentId, Jegyzet = $"{AssignmentName} ; {data.AssignmentId}" };
        var par = new DialogParameters<Szorgalmi>()
        {
            Content = szorgalmi,
            Alignment = HorizontalAlignment.Right,
            Title = "Szorgalmi felvétele",
            ShowDismiss = false,
            PrimaryActionEnabled = true,
            SecondaryActionEnabled = true,
            PrimaryAction = "Mentés",
            SecondaryAction = "Mégsem",
        };

        _dialog = await dialogService.ShowPanelAsync<DialogAddSzorgalmi>(szorgalmi, par);
        DialogResult result = await _dialog.Result;
        if (!result.Cancelled)
        {
            szorgalmi = result.Data as Szorgalmi;
        }
        else { isSzorgLecke = false; }

    }

    async void ViewAssigment()
    {
        var message = data.Feladatok.Find(f => f.Feladat.Id == data.AssignmentId).Feladat.Instructions.Content;
        var dialog = await dialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>
            ()
        {
            Content = new()
            {
                Title = "Feladat kiírása",
                MarkupMessage = new MarkupString(message),
                Icon = new Icons.Regular.Size24.Textbox(),
                IconColor = Color.Success,
            },
            PrimaryAction = "Bezár",
            SecondaryActionEnabled = false,
            Width = "300px",
        });
    }
}
