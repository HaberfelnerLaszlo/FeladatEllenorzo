@page "/ell"
@using FeladatEllenorzo_CP.Services;
@inject IGraphService graph
@inject GlobalData data
@inject NavigationManager navi
@inject IDialogService dialog
@inject IAlertService alert
<div class="row">
	<div class="col-1">
		<button class="btn btn-toolbar" @onclick=Back>Vissza</button>
	</div>
	<div class=" col-11">
		@if (data.Members.Count > 0)
		{
			<select @onchange="(e)=>SelectedMember(e.Value)">
				
					<optgroup label="Beadta">
					@{
						i = 0;
						@foreach (var item in data.Members.Where(m=>m.Status=="Beadva"))
						{

							if (item.SubmissionId == data.SubmissionId)
							{
								submitted = true;
								index = i;
								<option value="@item.SubmissionId" selected>@item.MemberName</option>
							}
							else
							{
								<option value="@item.SubmissionId">@item.MemberName  (@i)</option>
							}
							i++;
						}
					}
				</optgroup>
					<optgroup label="Visszaküldve">
						@foreach (var item in data.Members.Where(m=>m.Status=="Visszaküldve"))
						{

							if (item.SubmissionId== data.SubmissionId)
							{
								submitted = false;
								index = i;
								<option value="@item.SubmissionId" selected>@item.MemberName</option>
							}
							else
							{
								<option value="@item.SubmissionId">@item.MemberName (@i)</option>
							}
							i++;
						}
					</optgroup>
				<optgroup label="Többiek">
					@foreach (var item in data.Members.Where(m => m.Status != "Visszaküldve" && m.Status!="Beadva"))
					{

						if (item.SubmissionId == data.SubmissionId)
						{
							index = i;
							<option value="@item.SubmissionId" selected>@item.MemberName</option>
						}
						else
						{
							<option value="@item.SubmissionId">@item.MemberName (@i)</option>
						}
						i++;
					}
				</optgroup>

				}
			</select>
			<button @onclick="Next">Next</button>
		}
		<p>@DisplayMessage</p>
	</div>
</div>
<div class="row">
	<div class="col-8">
		@if (url.Equals(string.Empty))
		{
			<p>Nincs beküldve ...</p>
		}
		else
		{
			<iframe width="800" height="600" src="@url"></iframe>
		}
	</div>
	<div class=" col-4">
		<div>
			@if (mediaResource.Count > 0)
			{
				@foreach (var item in mediaResource)
				{
					<button @onclick="()=>ShowImage(item.FileUrl)">@item.DisplayName</button>
				}
			}
			@if (fileResource.Count>0)
			{
				@foreach (var item in fileResource)
				{
					<button @onclick="()=>ShowImage(item.FileUrl)">@item.DisplayName</button>
				}
			}
            @if (excelResource.Count > 0)
            {
                @foreach (var item in excelResource)
                {
                    <button @onclick="()=>ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
            @if (wordResource.Count > 0)
            {
                @foreach (var item in wordResource)
                {
                    <button @onclick="()=>ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
            @if (ppResource.Count > 0)
            {
                @foreach (var item in ppResource)
                {
                    <button @onclick="()=>ShowImage(item.FileUrl)">@item.DisplayName</button>
                }
            }
        </div>
		<div class="row">
			<div class="col">
				<ul style="list-style-type:none">
					@foreach (var item in data.Szovegek.Where(s=>s.Type=="poz"))
					{
						if (item.Text.Length>15)
						{
							<li @onclick=@(()=>AddText(item.Text)) title="@item.Text">@item.Text.Substring(0,15)</li>
						}
						else
						{
							<li @onclick=@(()=>AddText(item.Text))>@item.Text</li>
						}
					}
				</ul>
			</div>
			<div class="col">
				<ul style="list-style-type:none">
						@foreach (var item in data.Szovegek.Where(s=>s.Type=="neg"))
						{
							if (item.Text.Length > 15)
							{
									<li @onclick=@(()=>AddText(item.Text)) title="@item.Text">@item.Text.Substring(0,15)</li>
							}
							else
							{
									<li @onclick=@(()=>AddText(item.Text))>@item.Text</li>
							}
						}
				</ul>
			</div>
		</div>
		<div>
            <button class="btn" @onclick=AddNewText>Új</button>
			@if (data.Szovegek.Count > 0)
			{
				<button class="btn" @onclick=ManageSzovegOpen>Szövegek</button>
			}

		</div>
		<div hidden="@visibleNewText">
			<FeladatEllenorzo_CP.Components.NewSzoveg SaveText="SaveText"></FeladatEllenorzo_CP.Components.NewSzoveg>
		</div>
		<div>
			<textarea rows="3"
					  placeholder="Visszajelzés..."
					  style="resize:vertical; width:100%; max-height:50%"
					  oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';" 
					  @onchange=@((e) => Valtozas(false, e)) 
					  value="@Valasz"
					  lang="hu"
					  spellcheck="false">
						@Valasz
			</textarea>
		</div>
		<div>
			<input type="number" style="width: 20%;" value="@Pont" @onchange=@((e)=>Valtozas(true,e)) /> pont <span style="color:green" hidden="@IsNotSaved"> ✔️</span>
			<button class="btn btn-primary" disabled="@(!changed)" @onclick=Save>Mentés</button>
		</div>
	</div>
</div>
@if (valasz is not null && valasz.Feedback is not null)
{
	<p>@valasz.Feedback.Text.Content</p>
}

@if (pont is not null && pont.Points is not null)
{
	<p>@pont.Points.Points.Value pont</p>
}
@code {
	private EducationSubmissionResourceCollectionResponse feladatForrasok;
	private List<EducationMediaResource> mediaResource = new();
	private List<EducationFileResource> fileResource = new();
	private List<EducationExcelResource> excelResource = new();
	private List<EducationWordResource> wordResource = new();
	private List<EducationPowerPointResource> ppResource = new();
	private EducationOutcomeCollectionResponse feladatValaszok;
	private EducationFeedbackOutcome valasz;
	private EducationPointsOutcome pont;
	private string DriveId = string.Empty, ItemId = string.Empty, url = string.Empty, Valasz = string.Empty, nev = string.Empty, DisplayMessage=string.Empty;
	private bool submitted = true,changed=false, changedValasz = false, changedPont=false,IsNotSaved=true,visibleNewText=true;
	private int index = 0,i=0;
	private float Pont=0;
	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			nev = data.Name.Split(" ")[1];

			DataInit();
		}
		return base.OnAfterRenderAsync(firstRender);
	}
	private async void DataInit()
	{
		NetworkAccess accessType = Connectivity.Current.NetworkAccess;
		if (accessType != NetworkAccess.Internet)
		{
			await alert.ShowAlertAsync("Nincs internet, állítsa helyre a kapcsolatot!", "Internet hiba", "Rendben");
			return;
		}
		try
		{
		feladatForrasok = await graph.GetFeladatForras(data.ClassId, data.AssignmentId, data.SubmissionId);
		foreach (var item in feladatForrasok.Value)
		{
			string fileUrl = string.Empty;
			switch (item.Resource.GetType().Name)
			{
				case nameof(EducationMediaResource):
					mediaResource.Add((EducationMediaResource)item.Resource);
				fileUrl = mediaResource.FirstOrDefault().FileUrl;
					break;
				case nameof(EducationFileResource):
					fileResource.Add((EducationFileResource)item.Resource);
				fileUrl = fileResource.FirstOrDefault().FileUrl;
					break;
				case nameof(EducationExcelResource):
					excelResource.Add((EducationExcelResource)item.Resource);
				fileUrl = excelResource.FirstOrDefault().FileUrl;
					break;
				case nameof(EducationWordResource):
					wordResource.Add((EducationWordResource)item.Resource);
				fileUrl = wordResource.FirstOrDefault().FileUrl;
					break;
				case nameof(EducationPowerPointResource):
					ppResource.Add((EducationPowerPointResource)item.Resource);
				fileUrl = ppResource.FirstOrDefault().FileUrl;
					break;
				default:
					break;
			}
			if (fileUrl.Length>0)
			{
				url = await GetUrl(fileUrl);
			}
			else
			{
				url = string.Empty;
			}
		}
		Pont = 2;
		changedPont = true;
		feladatValaszok = await graph.GetFeladatValasz(data.ClassId, data.AssignmentId, data.SubmissionId);
		foreach (var item in feladatValaszok.Value)
		{
			valasz = (EducationFeedbackOutcome)item;
			@if (valasz is not null && valasz.Feedback is not null)
			{
				Valasz = valasz.Feedback.Text.Content;
			}
			else
			{
				Valasz = "Kedves "+nev;
			}
		}
		var feladatPontok = await graph.GetFeladatPont(data.ClassId, data.AssignmentId, data.SubmissionId);
		foreach (var item in feladatPontok.Value)
		{
			pont = (EducationPointsOutcome)item;
			@if (pont is not null && pont.Points is not null)
			{
				Pont = pont.Points.Points.Value;
				}
			}
		}
		catch (Exception e)
		{
			await alert.ShowAlertAsync(e.Message, "Kivétel történt", "Ok");
		}
		StateHasChanged();
	}
	private void Next()
	{
		var j = data.Members.FindIndex(m => m.SubmissionId == data.SubmissionId);
		if (j<data.Members.Count-1)
		{
			data.SubmissionId = data.Members[j + 1].SubmissionId;
			nev = data.Members[j + 1].MemberName.Split(" ")[1];
		}
		else
		{
			data.SubmissionId = data.Members[0].SubmissionId;
			nev = data.Members[0].MemberName.Split(" ")[1];
		}
		changed = false;
		changedPont = false;
		changedValasz = false;
		IsNotSaved = true;
		mediaResource.Clear();
		fileResource.Clear();
		wordResource.Clear();
		excelResource.Clear();
		ppResource.Clear();
		url = string.Empty;
		Pont = 0;
		DataInit();
	}
	private async Task<string> GetUrl(string fileUrl)
	{
		NetworkAccess accessType = Connectivity.Current.NetworkAccess;
		if (accessType != NetworkAccess.Internet)
		{
			await alert.ShowAlertAsync("Nincs internet, állítsa helyre a kapcsolatot!", "Internet hiba", "Rendben");
			return string.Empty;
		}
		var lenght = fileUrl.Length;
		if (lenght>34)
		{
			try
			{
				ItemId = fileUrl.Substring(lenght - 34);
				DriveId = fileUrl.Substring(40, 66);
				var fileInfo = await graph.GetFile(DriveId, ItemId);
				if (fileInfo is not null)
				{
					if (DisplayMessage.Length>0)
					{
						DisplayMessage = string.Empty;
					}
					return fileInfo.GetUrl;
				}
			}
			catch (System.Net.Http.HttpRequestException)
			{
				DisplayMessage = "Sajnos hálozati hiba történt!";
			}
			catch (Exception ex)
			{
				DisplayMessage = $"Valami hiba történt a fájl lekérésekor: {ex.Message}";
			}
		}
		return string.Empty;
	}
	private async void ShowImage(string fileUrl)
	{
		url = await GetUrl(fileUrl);
		StateHasChanged();
	}
	private void SelectedMember(object args)
	{
		data.SubmissionId = args.ToString();
		try
		{
			nev = data.Members.FirstOrDefault(m=>m.SubmissionId== args.ToString()).MemberName.Split(" ")[1];
			data.Name = data.Members.FirstOrDefault(m=>m.SubmissionId== args.ToString()).MemberName;

		}
		catch (Exception e)
		{
			throw new Exception(e.Message, e);
		}
		mediaResource.Clear();
		fileResource.Clear();
		wordResource.Clear();
		excelResource.Clear();
		ppResource.Clear();
		Pont = 0;
		DataInit();
	}
	private void Valtozas(bool changePont,ChangeEventArgs args)
	{
		changed = true;
		IsNotSaved = true;
		if (changePont)
		{
			changedPont = true;
			Pont = float.Parse(args.Value.ToString());
		}
		else
		{
			changedValasz = true;
			Valasz = args.Value.ToString();
		}
	}
	private void Back()
	{
		navi.NavigateTo($"feladatok/{data.ClassId}");
	}
	private async void Save()
	{
		NetworkAccess accessType = Connectivity.Current.NetworkAccess;
		if (accessType != NetworkAccess.Internet)
		{
			await alert.ShowAlertAsync("Nincs internet, állítsa helyre a kapcsolatot!", "Internet hiba", "Rendben");
			return;
		}
		var response = false;
		if (valasz is not null && changedValasz)
		{
			response=await graph.UpdateValasz(data.ClassId, data.AssignmentId, data.SubmissionId, valasz.Id, Valasz);
		}
		if (valasz is not null && changedPont)
		{
			response=await graph.UpdatePont(data.ClassId, data.AssignmentId, data.SubmissionId, pont.Id, Pont);
		}
		if (!response)
		{
			await dialog.DisplayAlert("Hiba!", "A mentés nem sikerült!", "Rendben");
		}
		else
		{
			var returned=await graph.Return(data.ClassId, data.AssignmentId, data.SubmissionId);
			if (returned)
			{
				data.Members.FirstOrDefault(m => m.SubmissionId == data.SubmissionId).Status = "Visszaküldve";
				//data.ReturnedMembers.Add(data.SubmissionId, data.Name);
				//data.SubmittedMembers.Remove(data.SubmissionId);
			}
			Next();
		}
	}
	private void AddText(string text)
	{
		Valasz = Valasz+$" {text}";
		changed = true;
		changedValasz = true;
	}
	void AddNewText()
	{
		visibleNewText = false;
	}
	void SaveText()
	{
		visibleNewText = true;
	}
	void ManageSzovegOpen()
	{
		navi.NavigateTo("szoveg/ell");
	}

}